package frc.robot.automation.drivebase.requests

import edu.wpi.first.wpilibj.DriverStation
import frc.robot.automation.drivebase.AlgaePlacement
import frc.robot.automation.drivebase.CoralPlacement
import frc.robot.automation.drivebase.ReefLocation

// !!! WARNING !!! WARNING !!! WARNING !!! WARNING !!! WARNING !!!
// ! DO NOT edit this file unless you know EXACTLY what you are  !
// ! doing. This file maps out positions of field elements to    !
// ! AprilTag IDs, which are used by this ENTIRE automation      !
// ! system. CHANGES TO THIS FILE CAN CAUSE PHYSICAL HARM TO     !
// ! ROBOTS AND PEOPLE. If you need to make changes, VERIFY YOU  !
// ! HAVE THE CORRECT IDs AND POSITIONS BEFORE DOING SO. These   !
// ! kinds of mistakes have led to many issues in the past.      !
// ! ! WARNING !!! WARNING !!! WARNING !!! WARNING !!! WARNING !!!

// With that out of the way...
// AprilTag placements can be found at https://firstfrc.blob.core.windows.net/frc2025/FieldAssets/Apriltag_Images_and_User_Guide.pdf
object RedAlliance : FieldLayout {
    override val LEFT_CORAL_STATION = 1
    override val RIGHT_CORAL_STATION = 2
    override val REEF_AB = 7
    override val REEF_CD = 8
    override val REEF_EF = 9
    override val REEF_GH = 10
    override val REEF_IJ = 11
    override val REEF_KL = 6
    override val PROCESSOR = 3
    override val LEFT_BARGE = 5
    override val RIGHT_BARGE = 4
}

object BlueAlliance : FieldLayout {
    override val LEFT_CORAL_STATION = 13
    override val RIGHT_CORAL_STATION = 12
    override val REEF_AB = 18
    override val REEF_CD = 17
    override val REEF_EF = 22
    override val REEF_GH = 21
    override val REEF_IJ = 20
    override val REEF_KL = 19
    override val PROCESSOR = 16
    override val LEFT_BARGE = 14
    override val RIGHT_BARGE = 15
}

/**
 * Interface representing the layout of the field elements for a specific alliance.
 * This interface defines constants for the positions of various field elements.
 * Each implementation corresponds to a specific alliance (Red or Blue).
 */
interface FieldLayout {
    val LEFT_CORAL_STATION: Int
    val RIGHT_CORAL_STATION: Int
    val REEF_AB: Int
    val REEF_CD: Int
    val REEF_EF: Int
    val REEF_GH: Int
    val REEF_IJ: Int
    val REEF_KL: Int
    val PROCESSOR: Int
    val LEFT_BARGE: Int
    val RIGHT_BARGE: Int

    companion object {
        /**
         * Returns the AprilTag ID for the specified [ReefLocation].
         * This function maps the [ReefLocation] to its corresponding AprilTag ID.
         *
         * @param side The [ReefLocation] for which to get the tag ID.
         * @return The AprilTag ID associated with the specified [ReefLocation].
         */
        fun getTag(side: ReefLocation): Int {
            if (side is CoralPlacement) return when (side) {
                CoralPlacement.A, CoralPlacement.B -> getFieldLayout().REEF_AB
                CoralPlacement.C, CoralPlacement.D -> getFieldLayout().REEF_CD
                CoralPlacement.E, CoralPlacement.F -> getFieldLayout().REEF_EF
                CoralPlacement.G, CoralPlacement.H -> getFieldLayout().REEF_GH
                CoralPlacement.I, CoralPlacement.J -> getFieldLayout().REEF_IJ
                CoralPlacement.K, CoralPlacement.L -> getFieldLayout().REEF_KL
            }
            else if (side is AlgaePlacement) {
                return when (side) {
                    AlgaePlacement.AB -> getFieldLayout().REEF_AB
                    AlgaePlacement.CD -> getFieldLayout().REEF_CD
                    AlgaePlacement.EF -> getFieldLayout().REEF_EF
                    AlgaePlacement.GH -> getFieldLayout().REEF_GH
                    AlgaePlacement.IJ -> getFieldLayout().REEF_IJ
                    AlgaePlacement.KL -> getFieldLayout().REEF_KL
                }
            }
            else throw IllegalArgumentException("Invalid ReefLocation: $side")
        }
    }
}

/**
 * Extension function to get the field layout based on the alliance.
 * This function returns the appropriate [FieldLayout] implementation based on the alliance.
 *
 * @return The [FieldLayout] corresponding to the alliance.
 */
fun DriverStation.Alliance.getFieldLayout(): FieldLayout {
    return when (this) {
        DriverStation.Alliance.Red -> RedAlliance
        DriverStation.Alliance.Blue -> BlueAlliance
        else -> throw IllegalStateException("Invalid alliance: $this")
    }
}

fun getFieldLayout(): FieldLayout {
    return DriverStation.getAlliance()
        .orElseThrow { NoSuchElementException("FMS returned an invalid alliance") }
        .getFieldLayout()
}