//
//
//
//        SmartDashboard.putData(algaeIntake.runIntake().withName("Run Intake"))
//        SmartDashboard.putData(algaeIntake.retractIntake().withName("Retract Intake"))

//        SmartDashboard.putData(
//
//            driveQueue.clearAllAsCommand().withName("Clear Auto Queue").alongWith(
//                superstructureQueue.clearAllAsCommand().withName("Clear Superstructure Queue")
//            ).withName("\nCLEAR ALL QUEUES\n")
//        )

        // add individual reef goto commands to queue
        //for (reef in PathfindingFactories.Reef.entries) {
        //    SmartDashboard.putData(
        //        driveQueue.addAsCommand({
        //            PathfindingFactories.pathfindToSpecificReef(drive, reef)
        //                .withName("Reef " + reef.name + " (Queued)")
        //        }).withName("Queue Reef " + reef.name)
        //    )
        //}
//        for (reef in PathfindingFactories.Reef.entries) {
//            when (reef) {
//                PathfindingFactories.Reef.AB_ALGAE, PathfindingFactories.Reef.CD_ALGAE, PathfindingFactories.Reef.EF_ALGAE, PathfindingFactories.Reef.GH_ALGAE, PathfindingFactories.Reef.IJ_ALGAE, PathfindingFactories.Reef.KL_ALGAE -> {
//                    SmartDashboard.putData(
//                        driveQueue.addButDoNotStartAsCommand({
//                            PathfindingFactories.pathfindToReef(
//                                drive, reef, driveTranslationalControlSupplier
//                            )
//                        }).andThen(
//                            superstructureQueue.addButDoNotStartAsCommand({
//                                SuperstructureCommands.goToPosition(
//                                    elevator, arm, climber, when (reef) {
//                                        PathfindingFactories.Reef.AB_ALGAE, PathfindingFactories.Reef.EF_ALGAE, PathfindingFactories.Reef.IJ_ALGAE -> Constants.SuperstructureConstants.SuperstructureState.UPPER_REEF_ALGAE
//                                        else -> Constants.SuperstructureConstants.SuperstructureState.LOWER_REEF_ALGAE
//                                    }
//                                )
//                            }, {
//                                clawIntake.intakeWithoutStoppingForAlgae()
//                            }, {
//                                SuperstructureCommands.goToPosition(
//                                    elevator,
//                                    arm,
//                                    climber,
//                                    Constants.SuperstructureConstants.SuperstructureState.BARGE_LAUNCH
//                                )
//                            })
//                        ).withName("\nQueue Reef " + reef.name + "\n").ignoringDisable(true)
//                    )
//                }
//
//                else -> SmartDashboard.putData(driveQueue.addButDoNotStartAsCommand({
//                    PathfindingFactories.pathfindToReef(
//                        drive, reef, driveTranslationalControlSupplier
//                    )
//                }).withName("\nQueue Reef " + reef.name + "\n").ignoringDisable(true))
//
//
//            }
//
//        }

        //for (reef in PathfindingFactories.Reef.entries) {
        //    SmartDashboard.putData(
        //        driveQueue.addAsCommand({
        //            PathfindingFactories.finalLineupToSpecificReef(drive, reef)
        //                .withName("Final Lineup to Reef " + reef.name + " (Queued)")
        //        }).withName("Queue Final Lineup to Reef " + reef.name)
        //    )
        //}
//        for (coralStation in PathfindingFactories.CoralStationSide.entries) {
//            SmartDashboard.putData(
//                driveQueue.addAsCommand({
//                    PathfindingFactories.pathfindToSpecificCoralStation(
//                        drive, coralStation
//                    ).withName("Drive to " + coralStation.name + " Coral Station (Queued)")
//                }).withName("Queue Drive to " + coralStation.name + " Coral Station")
//            )
//            SmartDashboard.putData(
//                driveQueue.addButDoNotStartAsCommand({
//                    PathfindingFactories.pathfindToCoralStation(
//                        drive, coralStation, driveTranslationalControlSupplier
//                    ).withName("Drive to $coralStation Coral Station (Queued, alternate)")
//                }).ignoringDisable(true).andThen(
//                    superstructureQueue.addButDoNotStartAsCommand({
//                        SuperstructureCommands.preCoralPickup(elevator, arm, climber)
//                            .withName("Superstructure Pre-Coral Pickup (queued, auto-added)")
//                    }).withName("Queue Superstructure Pre-Coral Pickup").ignoringDisable(true)
//                ).andThen(
//
//                    superstructureQueue.addButDoNotStartAsCommand({
//                        SuperstructureCommands.pickUpCoral(elevator, arm, clawIntake, climber)
//                            .withName("Superstructure Coral Pickup (queued, auto-added)")
//                    }).withName("Queue Superstructure Coral Pickup").ignoringDisable(true)
//                ).withName("\n\n$coralStation Coral Station\n\n")
//            )
//        }


//        for (position in Constants.SuperstructureConstants.SuperstructureState.entries) {
//            val commands: Command = when (position) {
//                Constants.SuperstructureConstants.SuperstructureState.L1, Constants.SuperstructureConstants.SuperstructureState.L2, Constants.SuperstructureConstants.SuperstructureState.L3, Constants.SuperstructureConstants.SuperstructureState.L4 -> superstructureQueue.addButDoNotStartAsCommand(
//                    {
//                        SuperstructureCommands.goToPosition(
//                            elevator, arm, climber, position
//                        ).withName("Superstructure to " + position.name + " Position (Queued)")
//                    },
//                    {
//                        SuperstructureCommands.scoreAtPosition(
//                            elevator, arm, clawIntake, drive, position
//                        ).withName("Score in $position (queued, auto-added)")
//                    })
//
//                Constants.SuperstructureConstants.SuperstructureState.LOWER_REEF_ALGAE, Constants.SuperstructureConstants.SuperstructureState.UPPER_REEF_ALGAE -> superstructureQueue.addButDoNotStartAsCommand(
//                    {
//                        SuperstructureCommands.goToPosition(elevator, arm, climber, position)
//                            .withName("Superstructure to $position Position (Queued)")
//                    },
//                    {
//                        clawIntake.intakeWithoutStoppingForAlgae()
//                            .withName("Intake Algae (Queued, auto-added")
//                    },
//                    {
//                        SuperstructureCommands.goToPosition(
//                            elevator,
//                            arm,
//                            climber,
//                            Constants.SuperstructureConstants.SuperstructureState.BARGE_LAUNCH
//                        ).withName("Superstructure to Barge Launch Position (Queued, auto-added)")
//                    })
//
//                else -> superstructureQueue.addButDoNotStartAsCommand({
//                    SuperstructureCommands.goToPosition(
//                        elevator, arm, climber, position
//                    ).withName("Superstructure to " + position.name + " Position (Queued)")
//                })
//            }
//            SmartDashboard.putData(
//                commands.withName("Queue Superstructure $position Position").ignoringDisable(true)
//            )
//        }
//        SmartDashboard.putData(
//            superstructureQueue.addButDoNotStartAsCommand(
//                {
//                    SuperstructureCommands.pickUpCoral(
//                        elevator, arm, clawIntake, climber
//                    ).withName("Pick up coral (queued)")
//                }).withName("Queue pick up coral").ignoringDisable(true)
//        )
//        SmartDashboard.putData(
//            superstructureQueue.addButDoNotStartAsCommand(
//                {
//                    SuperstructureCommands.score(
//                        elevator, arm, clawIntake
//                    ).withName("Score (queued)")
//                }).withName("Queue score").ignoringDisable(true)
//        )

//        SmartDashboard.putData(
//            driveQueue.addButDoNotStartAsCommand(
//                {
//                    PathfindingFactories.pathfindToPosition(
//                        drive, Pose2d(
//                            8.23, 4.84, Rotation2d(Units.Degrees.of(173.55))
//                        ).let {
//                            if (DriverStation.getAlliance().isPresent && DriverStation.getAlliance()
//                                    .get() == DriverStation.Alliance.Red
//                            ) FlippingUtil.flipFieldPose(it) else it
//                        }, driveTranslationalControlSupplier
//                    )
//                }).withName("Pathfind to Home Cage")
//        )

//        SmartDashboard.putData(
//            driveQueue.addButDoNotStartAsCommand(
//                {
//                    PathfindingFactories.pathfindToPosition(
//                        drive, Pose2d(
//                            6.92, 6.12, Rotation2d(Units.Degrees.of(0.0))
//                        ).let {
//                            if (DriverStation.getAlliance().isPresent && DriverStation.getAlliance()
//                                    .get() == DriverStation.Alliance.Red
//                            ) FlippingUtil.flipFieldPose(it) else it
//                        }, driveTranslationalControlSupplier
//                    )
//                }).withName("Pathfind to Barge for Algae")
//        )
//        if (Constants.currentMode == Constants.Mode.SIM) SmartDashboard.putData(
//            runOnce(
//                { driveQueue.start() }).withName("Execute (sim-exclusive)")
//        )

//        SmartDashboard.putData("Auto Queue", driveQueue)
//        SmartDashboard.putData("Other Command Queue", superstructureQueue)
//        for (reef in PathfindingFactories.Reef.entries) {
//            SmartDashboard.putData(
//                runOnce({ nextReef = reef }).withName("Select Reef $reef")
//            )
//        }
//        for (station in PathfindingFactories.CoralStationSide.entries) {
//            SmartDashboard.putData(
//                runOnce({ nextStation = station }).withName("Select Coral Station $station")
//            )
//        }
//        for (pos in setOf(
//            Constants.SuperstructureConstants.SuperstructureState.L2,
//            Constants.SuperstructureConstants.SuperstructureState.L3,
//            Constants.SuperstructureConstants.SuperstructureState.L4
//        )) {
//            SmartDashboard.putData(
//                runOnce({ nextPosition = pos }).withName("Select Position $pos")
//            )
//        }

//        SmartDashboard.putData(
//            drive.followRepulsorField(Pose2d(15.7, 4.0, Rotation2d(Units.Degrees.of(180.0))))
//                .alongWith(
//                    SuperstructureCommands.algaeIntakeWithoutArm(elevator, arm, climber)
//                ).andThen(
//                    clawIntake.outtake().alongWith(
//                        Commands.run(
//                            { drive.stopWithX() }, drive
//                        )
//                    ).withDeadline(Commands.waitSeconds(5.0))
//                ).withName("Reset (RED ONLY)")
//        )

//        SmartDashboard.putData(
//            "Pathfind to Right Cage", PathfindingFactories.pathfindToPosition(
//                drive,
//                if (DriverStation.getAlliance().isPresent && DriverStation.getAlliance()
//                        .get() == DriverStation.Alliance.Red
//                ) {
//                    FlippingUtil.flipFieldPose(
//                        Pose2d(
//                            8.164, 4.953, Rotation2d(Units.Degrees.of(173.457))
//                        )
//                    )
//                } else {
//                    Pose2d(8.164, 4.953, Rotation2d(Units.Degrees.of(173.457)))
//                },
//                driveTranslationalControlSupplier
//            ).alongWith(runOnce({ state.push(task = AutoTask.TO_CAGE) }))
//                .finallyDo(Runnable { state.push(task = AutoTask.IDLE) })
//        )
//
//        SmartDashboard.putData(
//            "Pathfind to Middle Cage", PathfindingFactories.pathfindToPosition(
//                drive,
//                if (DriverStation.getAlliance().isPresent && DriverStation.getAlliance()
//                        .get() == DriverStation.Alliance.Red
//                ) {
//                    FlippingUtil.flipFieldPose(
//                        Pose2d(
//                            8.164, 6.1, Rotation2d(Units.Degrees.of(173.457))
//                        )
//                    )
//                } else {
//                    Pose2d(8.164, 6.1, Rotation2d(Units.Degrees.of(173.457)))
//                },
//                driveTranslationalControlSupplier
//            ).alongWith(runOnce({ state.push(task = AutoTask.TO_CAGE) }))
//                .finallyDo(Runnable { state.push(task = AutoTask.IDLE) })
//        )
//
//        SmartDashboard.putData(
//            "Pathfind to Left Cage", PathfindingFactories.pathfindToPosition(
//                drive,
//                if (DriverStation.getAlliance().isPresent && DriverStation.getAlliance()
//                        .get() == DriverStation.Alliance.Red
//                ) {
//                    FlippingUtil.flipFieldPose(
//                        Pose2d(
//                            8.164, 7.21, Rotation2d(Units.Degrees.of(173.457))
//                        )
//                    )
//                } else {
//                    Pose2d(8.164, 7.21, Rotation2d(Units.Degrees.of(173.457)))
//                },
//                driveTranslationalControlSupplier
//            ).alongWith(runOnce({ state.push(task = AutoTask.TO_CAGE) }))
//                .finallyDo(Runnable { state.push(task = AutoTask.IDLE) })
//        )
